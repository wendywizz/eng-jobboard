import React, { useState, useRef, useEffect, useReducer } from "react"
import { Row, Col, Button, Form, FormGroup, Label, Spinner } from "reactstrap"
import { Link, useParams, useRouteMatch } from "react-router-dom"
import { useForm } from "react-hook-form"
import _ from "lodash"
import Content, { ContentHeader, ContentBody } from "Frontend/components/Content"
import CheckboxTag from "Frontend/components/CheckboxTag"
import RadioTag from "Frontend/components/RadioTag"
import { EMPLOYER_JOB_EDIT_PATH, EMPLOYER_JOB_PATH } from "Frontend/configs/paths"
import {
  SPECIFIC_TYPE,
  STRUCTURAL_TYPE,
  RANGE_TYPE,
  REQUEST_TYPE,
  SALARY_TYPE_OPTION
} from "Frontend/constants/salary-type"
import {
  WORK_TIME_OPTION
} from "Frontend/constants/time"
import day from "Frontend/constants/day"
import "./index.css"

import { createJob, getJobByID, getJobType } from "Shared/states/job/JobDatasource"
import JobReducer from "Shared/states/job/JobReducer"
import {
  ADD_JOB_SUCCESS,
  ADD_JOB_FAILED,
  READ_JOB_SUCCESS,
  READ_JOB_FAILED,
  WAITING_JOB_OPERATION
} from "Shared/states/job/JobType"
import { getDistrictByProvince, getProvince } from "Shared/states/area/AreaDatasource"

let INIT_DATA = {
  loading: true,
  stauts: false,
  result: null,
  message: null
}
function JobFormContainer() {
  const match = useRouteMatch(EMPLOYER_JOB_EDIT_PATH)
  const { id } = useParams()
  const refForm = useRef()
  const { register, handleSubmit, watch, errors } = useForm()
  const selectedProvince = useRef({}), selectedSalaryType = useRef({})
  selectedProvince.current = watch("area_province", "")
  selectedSalaryType.current = watch("salary_type", "")

  const [jobType, setJobType] = useState([])
  const [province, setProvince] = useState([])
  const [district, setDistrict] = useState([])
  const [state, dispatch] = useReducer(JobReducer, INIT_DATA)

  useEffect(() => {
    async function fetchJobType() {
      const { data } = await getJobType()
      const jobTypeData = data.map(item => ({
        text: item.name,
        value: item.id
      }))

      setJobType(jobTypeData)
    }
    async function fetchProvince() {
      const { data } = await getProvince()
      const provinceData = data.map(item => ({
        text: item.nameTh,
        value: item.id
      }))

      setProvince(provinceData)
    }

    fetchJobType()
    fetchProvince()
  }, [])

  useEffect(() => {    
    if (match) {
      async function fetchJobData(id) {
        const { data, error } = await getJobByID(id)               

        if (error) {
          dispatch({ type: READ_JOB_FAILED, payload: { error }})
        } else {
          dispatch({ type: READ_JOB_SUCCESS, payload: { data }})
        }    
      }    

      if (state.loading) {
        setTimeout(() => {
          fetchJobData(id)
        }, 1000)
      }
    }
  }, [id, match])

  const _handleSubmit = async (values) => {
    let salary_min = 0, salary_max = 0
    let workdaysSelect = {}

    switch (values.salary_type) {
      case SPECIFIC_TYPE.value:
        salary_min = values.salary_value
        salary_max = values.salary_value
        break
      case RANGE_TYPE.value:
        salary_min = values.salary_min
        salary_max = values.salary_max
        break
      default:
        break
    }

    const workdays = values.workdays
    if (workdays) {
      workdaysSelect.mon = _.includes(workdays, "mon") ? 1 : 0
      workdaysSelect.tue = _.includes(workdays, "tue") ? 1 : 0
      workdaysSelect.wed = _.includes(workdays, "wed") ? 1 : 0
      workdaysSelect.thu = _.includes(workdays, "thu") ? 1 : 0
      workdaysSelect.fri = _.includes(workdays, "fri") ? 1 : 0
      workdaysSelect.sat = _.includes(workdays, "sat") ? 1 : 0
      workdaysSelect.sun = _.includes(workdays, "sun") ? 1 : 0
    }

    const bodyData = {
      position: values.position,
      job_type: values.job_type,
      require: values.require,
      duty: values.duty,
      welfare: values.welfare,
      performance: values.performance,
      salary_type: values.salary_type,
      salary_min,
      salary_max,
      work_days: JSON.stringify(workdaysSelect),
      work_timestart: values.time_start,
      work_timeend: values.time_end,
      area_pid: values.area_province,
      area_did: values.area_district,
      cid: 42,
      uid: 211
    }

    //dispatch({ type: WAITING_JOB_OPERATION })

    const { status, result, message } = await createJob(bodyData)
    console.log(status, result, message)
  }

  const _handleProvinceChanged = (e) => {
    async function fetchDistrict() {
      const id = e.target.value

      if (id) {
        const { data } = await getDistrictByProvince(id)
        const districtData = data.map(item => ({
          text: item.nameTh,
          value: item.id
        }))

        setDistrict(districtData)
      }
    }
    fetchDistrict()
  }

  const renderSalaryInput = (value) => {
    switch (value) {
      case SPECIFIC_TYPE.value:
        return (
          <FormGroup>
            <Label htmlFor="salary-value">ระบุเงินเดือน</Label>
            <input
              type="number"
              name="salary_value"
              id="salary-value"
              className={"form-control " + (errors.salary_value?.type && "is-invalid")}
              placeholder="ระบุเงินเดือน"
              ref={register({
                required: true
              })}
            />
            {errors.salary_value?.type === "required" && <p className="validate-message">Field is required</p>}
          </FormGroup>
        )
      case RANGE_TYPE.value:
        return (
          <FormGroup>
            <Label htmlFor="salary-range">ระบุช่วงเงินเดือน</Label>
            <div className="group-range-salary" id="salary-range">
              <div className="min input">
                <input
                  type="number"
                  name="salary_min"
                  className={"form-control " + (errors.salary_min?.type && "is-invalid")}
                  placeholder="เริ่มต้น"
                  ref={register({
                    required: true
                  })}
                />
              </div>
              <div className="seperator">ถึง</div>
              <div className="max input">
                <input
                  type="number"
                  name="salary_max"
                  className={"form-control " + (errors.salary_max?.type && "is-invalid")}
                  placeholder="สูงสุด"
                  ref={register({
                    required: true
                  })}
                />
              </div>
            </div>
            {
              (errors.salary_min?.type === "required" && errors.salary_max?.type === "required")
              && <p className="validate-message">Field is required</p>
            }
          </FormGroup>
        )
      case STRUCTURAL_TYPE.value: case REQUEST_TYPE.value: default:
        return (
          <div />
        )
    }
  }

  return (
    <Content className="content-jobform">
      {
        state.loading
          ? <Spinner />
          : (
            state.error
              ? <p>{state.error}</p>
              : (
                <>
                  <ContentHeader>
                    <Row>
                      <Col>
                        <Link className="btn btn-secondary" to={EMPLOYER_JOB_PATH}>ย้อนกลับ</Link>
                      </Col>
                      <Col style={{ textAlign: "right" }}>
                        <Button color="primary" onClick={handleSubmit(_handleSubmit)}>สร้าง</Button>
                        <Button color="danger">ยกเลิก</Button>
                      </Col>
                    </Row>
                  </ContentHeader>
                  <ContentBody>
                    <Form className="distance form-input" ref={refForm}>
                      <FormGroup>
                        <Label htmlFor="position">ชื่อตำแหน่งงาน</Label>
                        <input
                          type="text"
                          id="position"
                          name="position"
                          className={"form-control " + (errors.position?.type && "is-invalid")}
                          ref={register({
                            required: true
                          })}
                          defaultValue={state.data.position}
                        />
                        <p className="input-desc">ระบุชื่อตำแหน่งงาน</p>
                        {errors.position?.type === "required" && <p className="validate-message">Field is required</p>}
                      </FormGroup>
                      <FormGroup>
                        <Label htmlFor="job-type">ประเภทงาน</Label>
                        <div className="group-work-day horizontal">
                          {
                            jobType.map((item, index) => {
                              return (
                                <RadioTag
                                  key={index}
                                  name="job_type"
                                  id={`job_type_${index}`}
                                  text={item.text}
                                  value={item.value}
                                  ref={register({
                                    required: true,
                                  })}
                                  checked={state.data.jobType === item.value}                                
                                />
                              )
                            })
                          }
                        </div>
                        {errors.job_type?.type === "required" && <p className="validate-message">Please select one of them</p>}
                      </FormGroup>
                      <FormGroup>
                        <Row>
                          <Col lg={3} md={3} sm={12}>
                            <Label htmlFor="position">จำนวนรับสมัคร</Label>
                            <input
                              type="number"
                              id="require"
                              name="require"
                              className={"form-control " + (errors.require?.type && "is-invalid")}
                              ref={register({
                                required: true,
                                validate: {
                                  onlyPositive: value => parseInt(value, 10) > 0
                                }
                              })}
                              min={1}
                              defaultValue={state.data.require}
                            />
                            <p className="input-desc">ระบุจำนวนรับสมัคร</p>
                            {errors.require?.type === "required" && <p className="validate-message">Field is required</p>}
                            {errors.require?.type === "onlyPositive" && <p className="validate-message">Value must greater than 0</p>}
                          </Col>
                        </Row>
                      </FormGroup>                      
                      <FormGroup>
                        <Label htmlFor="duty">รายละเอียดงาน</Label>
                        <textarea
                          id="duty"
                          name="duty"
                          className={"form-control " + (errors.duty?.type && "is-invalid")}
                          rows={3}
                          ref={register({
                            required: true
                          })}
                          defaultValue={state.data.duty}
                        />
                        <p className="input-desc">ระบุขอบเขตหน้าที่ความรับผิดชอบของงาน</p>
                        {errors.duty?.type === "required" && <p className="validate-message">Field is required</p>}
                      </FormGroup>
                      <FormGroup>
                        <Label htmlFor="performance">คุณสมบัติผู้สมัคร</Label>
                        <textarea
                          id="performance"
                          name="performance"
                          className={"form-control " + (errors.performance?.type && "is-invalid")}
                          rows={3}
                          ref={register({
                            required: true
                          })}
                          defaultValue={state.data.performance}
                        />
                        <p className="input-desc">ระบุคุณสมบัติผู้สมัคร</p>
                        {errors.performance?.type === "required" && <p className="validate-message">Field is required</p>}
                      </FormGroup>
                      <FormGroup>
                        <Row>
                          <Col lg={3} md={6} sm={12}>
                            <Label htmlFor="salary_type">อัตราเงินเดือน</Label>
                            <select
                              id="salary_type"
                              name="salary_type"
                              className={"form-control " + (errors.salary_type?.type && "is-invalid")}
                              ref={register({
                                required: true
                              })}
                              defaultValue={state.data.salaryType}
                            >
                              <option></option>
                              {
                                SALARY_TYPE_OPTION.map((item, index) => (
                                  <option key={index} value={item.value}>{item.label}</option>
                                ))
                              }
                            </select>
                            <p className="input-desc">เลือกประเภทของอัตราเงินเดือน</p>
                            {errors.salary_type?.type === "required" && <p className="validate-message">Field is required</p>}
                          </Col>
                          <Col lg={4} md={6} sm={12}>
                            {
                              renderSalaryInput(selectedSalaryType.current)
                            }
                          </Col>
                        </Row>
                      </FormGroup>
                      <FormGroup>
                        <Label htmlFor="area-province">พื้นที่</Label>
                        <Row>
                          <Col lg={3} md={4} sm={12}>
                            <select
                              id="area-province"
                              name="area_province"
                              className={"form-control " + (errors.area_province?.type && "is-invalid")}
                              onChange={_handleProvinceChanged}
                              ref={register({
                                validate: {
                                  noSelected: value => value !== "-1"
                                }
                              })}
                              defaultValue={state.data.province ? state.data.province : "-1"}
                            >
                              <option value="-1">เลือกจังหวัด</option>
                              {
                                province.map((item, index) => (
                                  <option key={index} value={item.value}>{item.text}</option>
                                ))
                              }
                            </select>
                          </Col>
                          <Col lg={3} md={4} sm={12}>
                            {
                              selectedProvince.current !== "-1" && (
                                <select
                                  id="area-district"
                                  name="area_district"
                                  className={"form-control " + (errors.area_district?.type && "is-invalid")}
                                  ref={register({
                                    validate: {
                                      noSelected: value => value !== "-1"
                                    }
                                  })}
                                  defaultValue={state.data.district ? state.data.district : "-1"}
                                >
                                  <option value="-1">เลือกอำเภอ/เขต</option>
                                  {
                                    district.map((item, index) => (
                                      <option key={index} value={item.value}>{item.text}</option>
                                    ))
                                  }
                                </select>
                              )
                            }
                          </Col>
                        </Row>
                        <p className="input-desc">เลือกพื้นที่ผู้สมัครงานปฎิบัติงาน</p>
                        {
                          (errors.area_province?.type === "noSelected" || errors.area_district?.type === "noSelected")
                          && <p className="validate-message">Field is required</p>
                        }
                      </FormGroup>
                      <FormGroup>
                        <Label>วันทำงาน</Label>
                        <div className="group-work-day horizontal">
                          {
                            day.map((item, index) => {
                              const isChecked = index < 5 ? true : false
                              return (
                                <CheckboxTag
                                  key={index}
                                  name="workdays"
                                  text={item.text}
                                  value={item.value}
                                  checked={isChecked}
                                  ref={register({
                                    required: true
                                  })}
                                />
                              )
                            })
                          }
                        </div>
                        {errors.work_days?.type === "required" && <p className="validate-message">Field is required</p>}
                      </FormGroup>
                      <FormGroup>
                        <Row>
                          <Col lg={3} md={6} sm={12}>
                            <Label>เวลาทำงาน</Label>
                            <div className="time-range">
                              <div className="control start">
                                <Label htmlFor="time-start">เริ่ม</Label>
                                <select
                                  className={"form-control control " + (errors.time_start?.type && "is-invalid")}
                                  name="time_start"
                                  id="time-start"
                                  ref={register({
                                    required: true
                                  })}
                                  defaultValue={state.data.workTimeStart}
                                >
                                  <option></option>
                                  {
                                    WORK_TIME_OPTION.map((value, index) => (
                                      <option key={index} value={value}>{value}</option>
                                    ))
                                  }
                                </select>
                              </div>
                              <div className="seperator">ถึง</div>
                              <div className="control end">
                                <Label htmlFor="time-end">สิ้นสุด</Label>
                                <select
                                  className={"form-control control " + (errors.time_end?.type && "is-invalid")}
                                  name="time_end"
                                  id="time-end"
                                  ref={register({
                                    required: true
                                  })}
                                  defaultValue={state.data.workTimeEnd}
                                >
                                  <option></option>
                                  {
                                    WORK_TIME_OPTION.map((value, index) => (
                                      <option key={index} value={value}>{value}</option>
                                    ))
                                  }
                                </select>
                              </div>
                            </div>
                            {
                              (errors.time_start?.type === "required" || errors.time_end?.type === "required")
                              && <p className="validate-message">Field is required</p>
                            }
                          </Col>
                        </Row>
                      </FormGroup>
                      <FormGroup>
                        <Label htmlFor="welfare">สวัสดิการ</Label>
                        <textarea
                          id="welfare"
                          name="welfare"
                          className={"form-control " + (errors.welfare?.type && "is-invalid")}
                          rows={3}
                          ref={register({
                            required: true
                          })}
                          defaultValue={state.data.welfare}
                        />
                        <p className="input-desc">ระบุสวัสดิการที่ผู้เข้าทำงานจะได้รับ</p>
                        {errors.welfare?.type === "required" && <p className="validate-message">Field is required</p>}
                      </FormGroup>
                    </Form>
                  </ContentBody>
                </>
              )
          )
      }
    </Content>
  )
}
export default JobFormContainer